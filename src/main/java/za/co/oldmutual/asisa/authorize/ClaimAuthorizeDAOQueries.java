package za.co.oldmutual.asisa.authorize;

public class ClaimAuthorizeDAOQueries {

	private ClaimAuthorizeDAOQueries() {

	}

	public static final String CLAIM_AUTHORIZE_APPROVAL_QUERY = "SELECT PERSON.IDENTITY_NUMBER_TYPE_CODE ,PERSON.IDENTITY_NUMBER,"
			+ " NOTIFICATION.POLICY_REF_NUMBER , NOTIFICATION.POLICY_TYPE_CODE, NOTIFICATION.NOTIFICATION_TXN_TYPE, NOTIFICATION.CREATED_BY, "
			+ " CLAIM.CLAIM_REASON_CODES ,CLAIM.EVENT_CAUSE_CODE, CLAIM.DHA1663_NUMBER,CLAIM.CLAIM_STATUS_CODE, CLAIM.REASON_FOR_EDIT,NOTIFICATION.NOTIFICATION_ID "
			+ " FROM LC_NOTIFIABLE_CLAIM CLAIM JOIN LC_NOTIFICATION NOTIFICATION on NOTIFICATION.NOTIFICATION_ID = CLAIM.NOTIFICATION_ID"
			+ " JOIN LC_INSURED_PERSON PERSON on PERSON.PERSON_ID = NOTIFICATION.PERSON_ID "
			+ " WHERE NOTIFICATION.NOTIFICATION_STATUS_CODE  = :status";

	public static final String AUTHORIZE_PENDING_COUNT = "SELECT COUNT(*) FROM LC_NOTIFICATION WHERE NOTIFICATION_STATUS_CODE = :status ";

	public static final String FIND_INSURED_PERSON = "SELECT PERSON.* " + "FROM LC_NOTIFIABLE_CLAIM CLAIM  "
			+ "JOIN LC_NOTIFICATION NOTIFICATION ON NOTIFICATION.NOTIFICATION_ID = CLAIM.NOTIFICATION_ID  "
			+ "JOIN LC_INSURED_PERSON PERSON ON PERSON.PERSON_ID = NOTIFICATION.PERSON_ID  WHERE CLAIM.NOTIFICATION_ID  = :notificationID ";

	public static final String FIND_NOTE_BY_NOTIFICATION_ID_QUERY = "SELECT NOTE.NOTE_ID, NOTE.NOTE_TEXT, NOTE.IS_SCRATCHPAD AS SCRATCHPAD FROM LC_NOTE NOTE WHERE NOTIFICATION_ID = :notificationID";

	public static final String FIND_EXISTING_CLAIM_BY_ID_QUERY = "SELECT CLAIM.NOTIFICATION_ID , CLAIM.DHA1663_NUMBER , CLAIM.EVENT_DATE, CLAIM.EVENT_DEATH_PLACE,"
			+ " CLAIM.EVENT_DEATH_CERTIFICATE_NO ,CLAIM.EVENT_CAUSE_CODE, CLAIM.CLAIM_REASON_CODES, CLAIM.REASON_FOR_EDIT, CLAIM.CLAIM_CATEGORY_CODE, CLAIM.CLAIM_STATUS_CODE,"
			+ " NOTIFICATION.POLICY_REF_NUMBER ,NOTIFICATION.POLICY_TYPE_CODE, NOTIFICATION.CREATED_DATE,NOTIFICATION.CREATED_BY,NOTIFICATION.NOTIFICATION_SOURCE"
			+ " FROM LC_NOTIFIABLE_CLAIM_AUDIT CLAIM JOIN LC_NOTIFICATION NOTIFICATION ON CLAIM.NOTIFICATION_ID = NOTIFICATION.NOTIFICATION_ID"
			+ " JOIN LC_NOTIFIABLE_CLAIM NOTIFIABLECLAIM ON NOTIFIABLECLAIM.NOTIFICATION_ID = NOTIFICATION.NOTIFICATION_ID JOIN LC_INSURED_PERSON PERSON ON PERSON.PERSON_ID = NOTIFICATION.PERSON_ID "
			+ " WHERE CLAIM.NOTIFICATION_ID  =:notificationID ORDER BY NOTIFIABLE_CLAIM_AUDIT_ID DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY";

	public static final String FIND_UPDATED_CLAIM_BY_ID_QUERY = "SELECT CLAIM.NOTIFICATION_ID , CLAIM.DHA1663_NUMBER, CLAIM.EVENT_DATE, CLAIM.EVENT_DEATH_PLACE,"
			+ " CLAIM.EVENT_DEATH_CERTIFICATE_NO, CLAIM.EVENT_CAUSE_CODE, CLAIM.CLAIM_REASON_CODES, CLAIM.REASON_FOR_EDIT, CLAIM.CLAIM_CATEGORY_CODE, CLAIM.CLAIM_STATUS_CODE,"
			+ " NOTIFICATION.POLICY_REF_NUMBER , NOTIFICATION.POLICY_TYPE_CODE, NOTIFICATION.CREATED_DATE,NOTIFICATION.CREATED_BY,NOTIFICATION.NOTIFICATION_SOURCE"
			+ " FROM LC_NOTIFIABLE_CLAIM CLAIM JOIN LC_NOTIFICATION NOTIFICATION ON CLAIM.NOTIFICATION_ID  = NOTIFICATION.NOTIFICATION_ID"
			+ " WHERE NOTIFICATION.NOTIFICATION_ID   =:notificationID";

	public static final String CLAIM_AUTHORIZE_UPDATE_APPROVAL_QUERY = "UPDATE LC_NOTIFICATION SET NOTIFICATION_STATUS_CODE =:status WHERE NOTIFICATION_ID =:notificationID";

	public static final String CLAIM_AUDIT_QUERY = "SELECT CLAIMAUDIT.NOTIFICATION_ID, CLAIMAUDIT.EVENT_DATE, CLAIMAUDIT.EVENT_DEATH_PLACE, CLAIMAUDIT.EVENT_DEATH_CERTIFICATE_NO, "
			+ "CLAIMAUDIT.DHA1663_NUMBER,CLAIMAUDIT.EVENT_CAUSE_CODE,CLAIMAUDIT.CLAIM_STATUS_CODE,CLAIMAUDIT.CLAIM_CATEGORY_CODE,CLAIMAUDIT.PAYMENT_METHOD_CODE, CLAIMAUDIT.CLAIM_REASON_CODES, CLAIMAUDIT.REASON_FOR_EDIT,CLAIMAUDIT.CREATED_BY, CLAIMAUDIT.CREATED_DATE FROM LC_NOTIFIABLE_CLAIM_AUDIT CLAIMAUDIT "
			+ "JOIN LC_NOTIFICATION NOTIFICATION ON CLAIMAUDIT.NOTIFICATION_ID = NOTIFICATION.NOTIFICATION_ID JOIN LC_NOTIFIABLE_CLAIM CLAIM "
			+ "ON CLAIM.NOTIFICATION_ID = NOTIFICATION.NOTIFICATION_ID JOIN LC_INSURED_PERSON PERSON ON PERSON.PERSON_ID = NOTIFICATION.PERSON_ID "
			+ "WHERE CLAIMAUDIT.NOTIFICATION_ID = :notificationID ORDER BY NOTIFIABLE_CLAIM_AUDIT_ID DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY ";

	public static final String REVERT_OLD_NOTIFIABLE_CLAIM_QUERY = "UPDATE LC_NOTIFIABLE_CLAIM SET EVENT_DATE = to_date(:eventDate,'YYYY-MM-dd'), EVENT_DEATH_PLACE = :placeOfDeath, EVENT_DEATH_CERTIFICATE_NO = :deathCertificateNumber, "
			+ " DHA1663_NUMBER = :dha1663Number, CLAIM_REASON_CODES = :claimReasonCode, REASON_FOR_EDIT = :updateReason WHERE NOTIFICATION_ID = :notificationID";

	public static final String CLAIM_UPDATE_QUERY = "UPDATE LC_NOTIFIABLE_CLAIM SET EVENT_DATE = to_date(:eventDate,'YYYY-MM-dd'), EVENT_DEATH_PLACE = :placeOfDeath,"
			+ "EVENT_DEATH_CERTIFICATE_NO = :deathCertificateNumber, DHA1663_NUMBER = :dha1663Number,"
			+ " CLAIM_REASON_CODES = :claimReasonCode WHERE NOTIFICATION_ID = :notificationID";

	public static final String CLAIM_AUTHORIZE_DELETE_APPROVAL_QUERY = "UPDATE LC_NOTIFICATION SET NOTIFICATION_STATUS_CODE =:status, IS_ACTIVE =:isActive WHERE NOTIFICATION_ID =:notificationID";

	public static final String UPDATE_REMARK_QUERY = "UPDATE LC_NOTIFIABLE_CLAIM SET REASON_FOR_EDIT= :updateReason "
			+ "WHERE NOTIFICATION_ID = :notificationID ";

	public static final String FETCH_APPROVAL_CLAIM_AUDIT_QUERY = "SELECT CLAIM.NOTIFICATION_ID,CLAIM.CLAIM_CATEGORY_CODE,CLAIM.EVENT_DATE,CLAIM.EVENT_CAUSE_CODE,"
			+ " CLAIM.EVENT_DEATH_PLACE, CLAIM.EVENT_DEATH_CERTIFICATE_NO, CLAIM.DHA1663_NUMBER,"
			+ " CLAIM.CLAIM_REASON_CODES,CLAIM.CLAIM_STATUS_CODE,CLAIM.PAYMENT_METHOD_CODE FROM LC_NOTIFIABLE_CLAIM CLAIM WHERE NOTIFICATION_ID =:notificationID ";

	public static final String INSERT_NOTIFIABLE_CLAIM_AUDIT_QUERY = "INSERT INTO LC_NOTIFIABLE_CLAIM_AUDIT (NOTIFICATION_ID, CLAIM_CATEGORY_CODE,  "
			+ "EVENT_DATE, EVENT_CAUSE_CODE,  EVENT_DEATH_PLACE, EVENT_DEATH_CERTIFICATE_NO, DHA1663_NUMBER, "
			+ "CLAIM_REASON_CODES,  CLAIM_STATUS_CODE,  PAYMENT_METHOD_CODE, REASON_FOR_EDIT, NOTIFICATION_STATUS_CODE, NOTIFICATION_TXN_TYPE, ASTUTE_REF_NO, CREATED_BY, CREATED_DATE, IS_ACTIVE) "
			+ "VALUES (:notificationID, :claimCategoryCode, to_date(:eventDate,'YYYY-MM-dd'), :causeOfEvent.code, :placeOfDeath, "
			+ ":deathCertificateNumber, :dha1663Number, :claimReasonCode, :claimStatus.code, :paymentMethod.code, :updateReason, :notificationStatus, :notificationTxnType, :astuteRefNo, :createdBy, CURRENT_TIMESTAMP, :isActive) ";

	public static final String FETCH_TRANSCATION_TYPE_QUERY = "SELECT NOTIFICATION_TXN_TYPE FROM LC_NOTIFICATION WHERE NOTIFICATION_ID = :notificationID";

	public static final String GET_CREATED_BY_FOR_CLAIM = "SELECT CLAIMAUDIT.CREATED_BY FROM LC_NOTIFIABLE_CLAIM_AUDIT CLAIMAUDIT "
			+ "JOIN LC_NOTIFICATION NOTIFICATION ON CLAIMAUDIT.NOTIFICATION_ID = NOTIFICATION.NOTIFICATION_ID JOIN LC_NOTIFIABLE_CLAIM CLAIM "
			+ "ON CLAIM.NOTIFICATION_ID = NOTIFICATION.NOTIFICATION_ID JOIN LC_INSURED_PERSON PERSON ON PERSON.PERSON_ID = NOTIFICATION.PERSON_ID "
			+ "WHERE CLAIMAUDIT.NOTIFICATION_ID = :notificationID ORDER BY NOTIFIABLE_CLAIM_AUDIT_ID DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY ";
}
